'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18331
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18331.
'
Namespace ftpService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(MarshalByRefObject))>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FtpUploadFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FtpDownloadFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FtpDownloadFileListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FtpDownloadFileStreamOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.RTGS_SWIFT.My.MySettings.Default.RTGS_SWIFT_ftpService_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler
        
        '''<remarks/>
        Public Event FtpUploadFileCompleted As FtpUploadFileCompletedEventHandler
        
        '''<remarks/>
        Public Event FtpDownloadFileCompleted As FtpDownloadFileCompletedEventHandler
        
        '''<remarks/>
        Public Event FtpDownloadFileListCompleted As FtpDownloadFileListCompletedEventHandler
        
        '''<remarks/>
        Public Event FtpDownloadFileStreamCompleted As FtpDownloadFileStreamCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(-1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloWorldCompleted(Me, New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FtpUploadFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FtpUploadFile(ByVal ftpHost As String, ByVal filenameToUpload As String, ByVal uploadFolderName As String, ByVal usr As String, ByVal pwd As String) As String
            Dim results() As Object = Me.Invoke("FtpUploadFile", New Object() {ftpHost, filenameToUpload, uploadFolderName, usr, pwd})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FtpUploadFileAsync(ByVal ftpHost As String, ByVal filenameToUpload As String, ByVal uploadFolderName As String, ByVal usr As String, ByVal pwd As String)
            Me.FtpUploadFileAsync(ftpHost, filenameToUpload, uploadFolderName, usr, pwd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FtpUploadFileAsync(ByVal ftpHost As String, ByVal filenameToUpload As String, ByVal uploadFolderName As String, ByVal usr As String, ByVal pwd As String, ByVal userState As Object)
            If (Me.FtpUploadFileOperationCompleted Is Nothing) Then
                Me.FtpUploadFileOperationCompleted = AddressOf Me.OnFtpUploadFileOperationCompleted
            End If
            Me.InvokeAsync("FtpUploadFile", New Object() {ftpHost, filenameToUpload, uploadFolderName, usr, pwd}, Me.FtpUploadFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnFtpUploadFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.FtpUploadFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FtpUploadFileCompleted(Me, New FtpUploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FtpDownloadFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FtpDownloadFile(ByVal filePath As String, ByVal fileName As String, ByVal IP As String, ByVal UserID As String, ByVal Password As String, ByVal ftpFolder As String) As String
            Dim results() As Object = Me.Invoke("FtpDownloadFile", New Object() {filePath, fileName, IP, UserID, Password, ftpFolder})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FtpDownloadFileAsync(ByVal filePath As String, ByVal fileName As String, ByVal IP As String, ByVal UserID As String, ByVal Password As String, ByVal ftpFolder As String)
            Me.FtpDownloadFileAsync(filePath, fileName, IP, UserID, Password, ftpFolder, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FtpDownloadFileAsync(ByVal filePath As String, ByVal fileName As String, ByVal IP As String, ByVal UserID As String, ByVal Password As String, ByVal ftpFolder As String, ByVal userState As Object)
            If (Me.FtpDownloadFileOperationCompleted Is Nothing) Then
                Me.FtpDownloadFileOperationCompleted = AddressOf Me.OnFtpDownloadFileOperationCompleted
            End If
            Me.InvokeAsync("FtpDownloadFile", New Object() {filePath, fileName, IP, UserID, Password, ftpFolder}, Me.FtpDownloadFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnFtpDownloadFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.FtpDownloadFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FtpDownloadFileCompleted(Me, New FtpDownloadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FtpDownloadFileList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FtpDownloadFileList(ByVal ftpHost As String, ByVal downloadFolderName As String, ByVal user As String, ByVal pwd As String) As String()
            Dim results() As Object = Me.Invoke("FtpDownloadFileList", New Object() {ftpHost, downloadFolderName, user, pwd})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub FtpDownloadFileListAsync(ByVal ftpHost As String, ByVal downloadFolderName As String, ByVal user As String, ByVal pwd As String)
            Me.FtpDownloadFileListAsync(ftpHost, downloadFolderName, user, pwd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FtpDownloadFileListAsync(ByVal ftpHost As String, ByVal downloadFolderName As String, ByVal user As String, ByVal pwd As String, ByVal userState As Object)
            If (Me.FtpDownloadFileListOperationCompleted Is Nothing) Then
                Me.FtpDownloadFileListOperationCompleted = AddressOf Me.OnFtpDownloadFileListOperationCompleted
            End If
            Me.InvokeAsync("FtpDownloadFileList", New Object() {ftpHost, downloadFolderName, user, pwd}, Me.FtpDownloadFileListOperationCompleted, userState)
        End Sub
        
        Private Sub OnFtpDownloadFileListOperationCompleted(ByVal arg As Object)
            If (Not (Me.FtpDownloadFileListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FtpDownloadFileListCompleted(Me, New FtpDownloadFileListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FtpDownloadFileStream", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FtpDownloadFileStream(ByVal filePath As String, ByVal fileName As String, ByVal IP As String, ByVal UserID As String, ByVal Password As String, ByVal ftpFolder As String) As Stream
            Dim results() As Object = Me.Invoke("FtpDownloadFileStream", New Object() {filePath, fileName, IP, UserID, Password, ftpFolder})
            Return CType(results(0),Stream)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FtpDownloadFileStreamAsync(ByVal filePath As String, ByVal fileName As String, ByVal IP As String, ByVal UserID As String, ByVal Password As String, ByVal ftpFolder As String)
            Me.FtpDownloadFileStreamAsync(filePath, fileName, IP, UserID, Password, ftpFolder, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FtpDownloadFileStreamAsync(ByVal filePath As String, ByVal fileName As String, ByVal IP As String, ByVal UserID As String, ByVal Password As String, ByVal ftpFolder As String, ByVal userState As Object)
            If (Me.FtpDownloadFileStreamOperationCompleted Is Nothing) Then
                Me.FtpDownloadFileStreamOperationCompleted = AddressOf Me.OnFtpDownloadFileStreamOperationCompleted
            End If
            Me.InvokeAsync("FtpDownloadFileStream", New Object() {filePath, fileName, IP, UserID, Password, ftpFolder}, Me.FtpDownloadFileStreamOperationCompleted, userState)
        End Sub
        
        Private Sub OnFtpDownloadFileStreamOperationCompleted(ByVal arg As Object)
            If (Not (Me.FtpDownloadFileStreamCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FtpDownloadFileStreamCompleted(Me, New FtpDownloadFileStreamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18331"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public MustInherit Class Stream
        Inherits MarshalByRefObject
        
        Private positionField As Long
        
        Private readTimeoutField As Integer
        
        Private writeTimeoutField As Integer
        
        '''<remarks/>
        Public Property Position() As Long
            Get
                Return Me.positionField
            End Get
            Set
                Me.positionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReadTimeout() As Integer
            Get
                Return Me.readTimeoutField
            End Get
            Set
                Me.readTimeoutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WriteTimeout() As Integer
            Get
                Return Me.writeTimeoutField
            End Get
            Set
                Me.writeTimeoutField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(Stream)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18331"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public MustInherit Class MarshalByRefObject
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub FtpUploadFileCompletedEventHandler(ByVal sender As Object, ByVal e As FtpUploadFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FtpUploadFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub FtpDownloadFileCompletedEventHandler(ByVal sender As Object, ByVal e As FtpDownloadFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FtpDownloadFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub FtpDownloadFileListCompletedEventHandler(ByVal sender As Object, ByVal e As FtpDownloadFileListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FtpDownloadFileListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub FtpDownloadFileStreamCompletedEventHandler(ByVal sender As Object, ByVal e As FtpDownloadFileStreamCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FtpDownloadFileStreamCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Stream
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Stream)
            End Get
        End Property
    End Class
End Namespace
