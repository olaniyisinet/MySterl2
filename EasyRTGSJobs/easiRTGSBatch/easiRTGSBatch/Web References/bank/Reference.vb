'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18331
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18331.
'
Namespace bank
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="bankSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class bank
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getBalForDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAvgBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAvgBalanceTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAvgBalanceTableMonthOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountInfo2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getRatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountByNUBANOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getHumanManagerInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getHumanManagerDepartmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getHumanManagerFunctionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getHumanManagerGradesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getBankLedgersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountFromNUBANOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountFromNUBAN2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getBalanceDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCusBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCusBalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkOpLedgerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkCusAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTellerLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getNubanAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getNubanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CusInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CusInfo1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountFullinfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private validateChqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isChequeUsedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HasDetailsBeenPostedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DetailsWithValuedateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getBranchesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getBankNamesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getParallexCashDepotsitBankDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getParallexChqBankDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsChequeDetailsonBanksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkMobileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSMSAlertUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getBalance2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStatementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSMSAlertRegOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccount2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getFullAcctOperationCompleted As System.Threading.SendOrPostCallback
        
        Private gettellerstatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkTellerRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getFullAcctNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSTACODEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DATCONV_getCHE_DIGOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DATCONV_getCustomerNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DATCONV_getOVERDRAWNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportsPortalDDLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportsPortalDMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportsPortalSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DATCONV_getUNPROCESSEDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DATCONV_getREPORT29OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCustomeronSMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DATCONV_getRESTINDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DATCONV_getDESENGOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DATCONV_getBracodeFromTellerIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CUSREM_delTxnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CUSREM_InsertTxnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CUSREM_getCustomerRecsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CUSREM_processOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CUSREM_process2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.easiRTGSBatch.My.MySettings.Default.easiRTGSBatch_bank_bank
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getBalForDateCompleted As getBalForDateCompletedEventHandler
        
        '''<remarks/>
        Public Event getAvgBalanceCompleted As getAvgBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event getAvgBalanceTableCompleted As getAvgBalanceTableCompletedEventHandler
        
        '''<remarks/>
        Public Event getAvgBalanceTableMonthCompleted As getAvgBalanceTableMonthCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountInfoCompleted As getAccountInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountInfo2Completed As getAccountInfo2CompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountStatusCompleted As getAccountStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event getRatesCompleted As getRatesCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountByNUBANCompleted As getAccountByNUBANCompletedEventHandler
        
        '''<remarks/>
        Public Event getHumanManagerInfoCompleted As getHumanManagerInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event getHumanManagerDepartmentsCompleted As getHumanManagerDepartmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event getHumanManagerFunctionsCompleted As getHumanManagerFunctionsCompletedEventHandler
        
        '''<remarks/>
        Public Event getHumanManagerGradesCompleted As getHumanManagerGradesCompletedEventHandler
        
        '''<remarks/>
        Public Event getBankLedgersCompleted As getBankLedgersCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountCompleted As getAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountNameCompleted As getAccountNameCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountFromNUBANCompleted As getAccountFromNUBANCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountFromNUBAN2Completed As getAccountFromNUBAN2CompletedEventHandler
        
        '''<remarks/>
        Public Event getBalanceDetailsCompleted As getBalanceDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event getCusBalanceCompleted As getCusBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event getCusBalCompleted As getCusBalCompletedEventHandler
        
        '''<remarks/>
        Public Event checkOpLedgerCompleted As checkOpLedgerCompletedEventHandler
        
        '''<remarks/>
        Public Event checkCusAccountCompleted As checkCusAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event getTellerLimitCompleted As getTellerLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event getNubanAccountCompleted As getNubanAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event getNubanCompleted As getNubanCompletedEventHandler
        
        '''<remarks/>
        Public Event CusInfoCompleted As CusInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CusInfo1Completed As CusInfo1CompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountDetailsCompleted As getAccountDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountFullinfoCompleted As getAccountFullinfoCompletedEventHandler
        
        '''<remarks/>
        Public Event validateChqCompleted As validateChqCompletedEventHandler
        
        '''<remarks/>
        Public Event isChequeUsedCompleted As isChequeUsedCompletedEventHandler
        
        '''<remarks/>
        Public Event HasDetailsBeenPostedCompleted As HasDetailsBeenPostedCompletedEventHandler
        
        '''<remarks/>
        Public Event DetailsWithValuedateCompleted As DetailsWithValuedateCompletedEventHandler
        
        '''<remarks/>
        Public Event getBranchesCompleted As getBranchesCompletedEventHandler
        
        '''<remarks/>
        Public Event getBankNamesCompleted As getBankNamesCompletedEventHandler
        
        '''<remarks/>
        Public Event getParallexCashDepotsitBankDetailsCompleted As getParallexCashDepotsitBankDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event getParallexChqBankDetailsCompleted As getParallexChqBankDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event IsChequeDetailsonBanksCompleted As IsChequeDetailsonBanksCompletedEventHandler
        
        '''<remarks/>
        Public Event checkAccountCompleted As checkAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event checkMobileCompleted As checkMobileCompletedEventHandler
        
        '''<remarks/>
        Public Event getSMSAlertUserCompleted As getSMSAlertUserCompletedEventHandler
        
        '''<remarks/>
        Public Event getBalanceCompleted As getBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event getBalance2Completed As getBalance2CompletedEventHandler
        
        '''<remarks/>
        Public Event getStatementCompleted As getStatementCompletedEventHandler
        
        '''<remarks/>
        Public Event getSMSAlertRegCompleted As getSMSAlertRegCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccount2Completed As getAccount2CompletedEventHandler
        
        '''<remarks/>
        Public Event getFullAcctCompleted As getFullAcctCompletedEventHandler
        
        '''<remarks/>
        Public Event gettellerstatusCompleted As gettellerstatusCompletedEventHandler
        
        '''<remarks/>
        Public Event checkTellerRoleCompleted As checkTellerRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event getFullAcctNameCompleted As getFullAcctNameCompletedEventHandler
        
        '''<remarks/>
        Public Event getSTACODECompleted As getSTACODECompletedEventHandler
        
        '''<remarks/>
        Public Event DATCONV_getCHE_DIGCompleted As DATCONV_getCHE_DIGCompletedEventHandler
        
        '''<remarks/>
        Public Event DATCONV_getCustomerNameCompleted As DATCONV_getCustomerNameCompletedEventHandler
        
        '''<remarks/>
        Public Event DATCONV_getOVERDRAWNCompleted As DATCONV_getOVERDRAWNCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportsPortalDDLCompleted As ReportsPortalDDLCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportsPortalDMLCompleted As ReportsPortalDMLCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportsPortalSQLCompleted As ReportsPortalSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event DATCONV_getUNPROCESSEDCompleted As DATCONV_getUNPROCESSEDCompletedEventHandler
        
        '''<remarks/>
        Public Event DATCONV_getREPORT29Completed As DATCONV_getREPORT29CompletedEventHandler
        
        '''<remarks/>
        Public Event getCustomeronSMSCompleted As getCustomeronSMSCompletedEventHandler
        
        '''<remarks/>
        Public Event DATCONV_getRESTINDCompleted As DATCONV_getRESTINDCompletedEventHandler
        
        '''<remarks/>
        Public Event DATCONV_getDESENGCompleted As DATCONV_getDESENGCompletedEventHandler
        
        '''<remarks/>
        Public Event DATCONV_getBracodeFromTellerIdCompleted As DATCONV_getBracodeFromTellerIdCompletedEventHandler
        
        '''<remarks/>
        Public Event CUSREM_delTxnCompleted As CUSREM_delTxnCompletedEventHandler
        
        '''<remarks/>
        Public Event CUSREM_InsertTxnCompleted As CUSREM_InsertTxnCompletedEventHandler
        
        '''<remarks/>
        Public Event CUSREM_getCustomerRecsCompleted As CUSREM_getCustomerRecsCompletedEventHandler
        
        '''<remarks/>
        Public Event CUSREM_processCompleted As CUSREM_processCompletedEventHandler
        
        '''<remarks/>
        Public Event CUSREM_process2Completed As CUSREM_process2CompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBalForDate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBalForDate(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal sd As Date) As Double
            Dim results() As Object = Me.Invoke("getBalForDate", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, sd})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBalForDateAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal sd As Date)
            Me.getBalForDateAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, sd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBalForDateAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal sd As Date, ByVal userState As Object)
            If (Me.getBalForDateOperationCompleted Is Nothing) Then
                Me.getBalForDateOperationCompleted = AddressOf Me.OngetBalForDateOperationCompleted
            End If
            Me.InvokeAsync("getBalForDate", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, sd}, Me.getBalForDateOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBalForDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBalForDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBalForDateCompleted(Me, New getBalForDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAvgBalance", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAvgBalance(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer) As Double
            Dim results() As Object = Me.Invoke("getAvgBalance", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code})
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAvgBalanceAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer)
            Me.getAvgBalanceAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAvgBalanceAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal userState As Object)
            If (Me.getAvgBalanceOperationCompleted Is Nothing) Then
                Me.getAvgBalanceOperationCompleted = AddressOf Me.OngetAvgBalanceOperationCompleted
            End If
            Me.InvokeAsync("getAvgBalance", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code}, Me.getAvgBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAvgBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAvgBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAvgBalanceCompleted(Me, New getAvgBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAvgBalanceTable", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAvgBalanceTable(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("getAvgBalanceTable", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAvgBalanceTableAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer)
            Me.getAvgBalanceTableAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAvgBalanceTableAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal userState As Object)
            If (Me.getAvgBalanceTableOperationCompleted Is Nothing) Then
                Me.getAvgBalanceTableOperationCompleted = AddressOf Me.OngetAvgBalanceTableOperationCompleted
            End If
            Me.InvokeAsync("getAvgBalanceTable", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code}, Me.getAvgBalanceTableOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAvgBalanceTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAvgBalanceTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAvgBalanceTableCompleted(Me, New getAvgBalanceTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAvgBalanceTableMonth", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAvgBalanceTableMonth(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal year As Integer, ByVal month As Integer) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("getAvgBalanceTableMonth", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, year, month})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAvgBalanceTableMonthAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal year As Integer, ByVal month As Integer)
            Me.getAvgBalanceTableMonthAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, year, month, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAvgBalanceTableMonthAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal year As Integer, ByVal month As Integer, ByVal userState As Object)
            If (Me.getAvgBalanceTableMonthOperationCompleted Is Nothing) Then
                Me.getAvgBalanceTableMonthOperationCompleted = AddressOf Me.OngetAvgBalanceTableMonthOperationCompleted
            End If
            Me.InvokeAsync("getAvgBalanceTableMonth", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, year, month}, Me.getAvgBalanceTableMonthOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAvgBalanceTableMonthOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAvgBalanceTableMonthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAvgBalanceTableMonthCompleted(Me, New getAvgBalanceTableMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccountInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountInfo(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAccountInfo", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountInfoAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer)
            Me.getAccountInfoAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountInfoAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal userState As Object)
            If (Me.getAccountInfoOperationCompleted Is Nothing) Then
                Me.getAccountInfoOperationCompleted = AddressOf Me.OngetAccountInfoOperationCompleted
            End If
            Me.InvokeAsync("getAccountInfo", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code}, Me.getAccountInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountInfoCompleted(Me, New getAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccountInfo2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountInfo2(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAccountInfo2", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountInfo2Async(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer)
            Me.getAccountInfo2Async(bra_code, cus_num, cur_code, led_code, sub_acct_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountInfo2Async(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal userState As Object)
            If (Me.getAccountInfo2OperationCompleted Is Nothing) Then
                Me.getAccountInfo2OperationCompleted = AddressOf Me.OngetAccountInfo2OperationCompleted
            End If
            Me.InvokeAsync("getAccountInfo2", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code}, Me.getAccountInfo2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountInfo2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountInfo2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountInfo2Completed(Me, New getAccountInfo2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccountStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountStatus(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer) As Boolean
            Dim results() As Object = Me.Invoke("getAccountStatus", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountStatusAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer)
            Me.getAccountStatusAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountStatusAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal userState As Object)
            If (Me.getAccountStatusOperationCompleted Is Nothing) Then
                Me.getAccountStatusOperationCompleted = AddressOf Me.OngetAccountStatusOperationCompleted
            End If
            Me.InvokeAsync("getAccountStatus", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code}, Me.getAccountStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountStatusCompleted(Me, New getAccountStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRates", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getRates() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getRates", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getRatesAsync()
            Me.getRatesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getRatesAsync(ByVal userState As Object)
            If (Me.getRatesOperationCompleted Is Nothing) Then
                Me.getRatesOperationCompleted = AddressOf Me.OngetRatesOperationCompleted
            End If
            Me.InvokeAsync("getRates", New Object(-1) {}, Me.getRatesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetRatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getRatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getRatesCompleted(Me, New getRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccountByNUBAN", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountByNUBAN(ByVal nuban As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAccountByNUBAN", New Object() {nuban})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountByNUBANAsync(ByVal nuban As String)
            Me.getAccountByNUBANAsync(nuban, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountByNUBANAsync(ByVal nuban As String, ByVal userState As Object)
            If (Me.getAccountByNUBANOperationCompleted Is Nothing) Then
                Me.getAccountByNUBANOperationCompleted = AddressOf Me.OngetAccountByNUBANOperationCompleted
            End If
            Me.InvokeAsync("getAccountByNUBAN", New Object() {nuban}, Me.getAccountByNUBANOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountByNUBANOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountByNUBANCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountByNUBANCompleted(Me, New getAccountByNUBANCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHumanManagerInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getHumanManagerInfo(ByVal staffID As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("getHumanManagerInfo", New Object() {staffID})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getHumanManagerInfoAsync(ByVal staffID As String)
            Me.getHumanManagerInfoAsync(staffID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getHumanManagerInfoAsync(ByVal staffID As String, ByVal userState As Object)
            If (Me.getHumanManagerInfoOperationCompleted Is Nothing) Then
                Me.getHumanManagerInfoOperationCompleted = AddressOf Me.OngetHumanManagerInfoOperationCompleted
            End If
            Me.InvokeAsync("getHumanManagerInfo", New Object() {staffID}, Me.getHumanManagerInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetHumanManagerInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getHumanManagerInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getHumanManagerInfoCompleted(Me, New getHumanManagerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHumanManagerDepartments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getHumanManagerDepartments() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("getHumanManagerDepartments", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getHumanManagerDepartmentsAsync()
            Me.getHumanManagerDepartmentsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getHumanManagerDepartmentsAsync(ByVal userState As Object)
            If (Me.getHumanManagerDepartmentsOperationCompleted Is Nothing) Then
                Me.getHumanManagerDepartmentsOperationCompleted = AddressOf Me.OngetHumanManagerDepartmentsOperationCompleted
            End If
            Me.InvokeAsync("getHumanManagerDepartments", New Object(-1) {}, Me.getHumanManagerDepartmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetHumanManagerDepartmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getHumanManagerDepartmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getHumanManagerDepartmentsCompleted(Me, New getHumanManagerDepartmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHumanManagerFunctions", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getHumanManagerFunctions() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("getHumanManagerFunctions", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getHumanManagerFunctionsAsync()
            Me.getHumanManagerFunctionsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getHumanManagerFunctionsAsync(ByVal userState As Object)
            If (Me.getHumanManagerFunctionsOperationCompleted Is Nothing) Then
                Me.getHumanManagerFunctionsOperationCompleted = AddressOf Me.OngetHumanManagerFunctionsOperationCompleted
            End If
            Me.InvokeAsync("getHumanManagerFunctions", New Object(-1) {}, Me.getHumanManagerFunctionsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetHumanManagerFunctionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getHumanManagerFunctionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getHumanManagerFunctionsCompleted(Me, New getHumanManagerFunctionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHumanManagerGrades", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getHumanManagerGrades() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("getHumanManagerGrades", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getHumanManagerGradesAsync()
            Me.getHumanManagerGradesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getHumanManagerGradesAsync(ByVal userState As Object)
            If (Me.getHumanManagerGradesOperationCompleted Is Nothing) Then
                Me.getHumanManagerGradesOperationCompleted = AddressOf Me.OngetHumanManagerGradesOperationCompleted
            End If
            Me.InvokeAsync("getHumanManagerGrades", New Object(-1) {}, Me.getHumanManagerGradesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetHumanManagerGradesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getHumanManagerGradesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getHumanManagerGradesCompleted(Me, New getHumanManagerGradesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBankLedgers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBankLedgers() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getBankLedgers", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBankLedgersAsync()
            Me.getBankLedgersAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBankLedgersAsync(ByVal userState As Object)
            If (Me.getBankLedgersOperationCompleted Is Nothing) Then
                Me.getBankLedgersOperationCompleted = AddressOf Me.OngetBankLedgersOperationCompleted
            End If
            Me.InvokeAsync("getBankLedgers", New Object(-1) {}, Me.getBankLedgersOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBankLedgersOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBankLedgersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBankLedgersCompleted(Me, New getBankLedgersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccount(ByVal accnum As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAccount", New Object() {accnum})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountAsync(ByVal accnum As String)
            Me.getAccountAsync(accnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountAsync(ByVal accnum As String, ByVal userState As Object)
            If (Me.getAccountOperationCompleted Is Nothing) Then
                Me.getAccountOperationCompleted = AddressOf Me.OngetAccountOperationCompleted
            End If
            Me.InvokeAsync("getAccount", New Object() {accnum}, Me.getAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountCompleted(Me, New getAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccountName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountName(ByVal accnum As String) As String
            Dim results() As Object = Me.Invoke("getAccountName", New Object() {accnum})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountNameAsync(ByVal accnum As String)
            Me.getAccountNameAsync(accnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountNameAsync(ByVal accnum As String, ByVal userState As Object)
            If (Me.getAccountNameOperationCompleted Is Nothing) Then
                Me.getAccountNameOperationCompleted = AddressOf Me.OngetAccountNameOperationCompleted
            End If
            Me.InvokeAsync("getAccountName", New Object() {accnum}, Me.getAccountNameOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountNameCompleted(Me, New getAccountNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccountFromNUBAN", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountFromNUBAN(ByVal nuban As String) As String
            Dim results() As Object = Me.Invoke("getAccountFromNUBAN", New Object() {nuban})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountFromNUBANAsync(ByVal nuban As String)
            Me.getAccountFromNUBANAsync(nuban, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountFromNUBANAsync(ByVal nuban As String, ByVal userState As Object)
            If (Me.getAccountFromNUBANOperationCompleted Is Nothing) Then
                Me.getAccountFromNUBANOperationCompleted = AddressOf Me.OngetAccountFromNUBANOperationCompleted
            End If
            Me.InvokeAsync("getAccountFromNUBAN", New Object() {nuban}, Me.getAccountFromNUBANOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountFromNUBANOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountFromNUBANCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountFromNUBANCompleted(Me, New getAccountFromNUBANCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccountFromNUBAN2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountFromNUBAN2(ByVal nuban As String) As String
            Dim results() As Object = Me.Invoke("getAccountFromNUBAN2", New Object() {nuban})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountFromNUBAN2Async(ByVal nuban As String)
            Me.getAccountFromNUBAN2Async(nuban, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountFromNUBAN2Async(ByVal nuban As String, ByVal userState As Object)
            If (Me.getAccountFromNUBAN2OperationCompleted Is Nothing) Then
                Me.getAccountFromNUBAN2OperationCompleted = AddressOf Me.OngetAccountFromNUBAN2OperationCompleted
            End If
            Me.InvokeAsync("getAccountFromNUBAN2", New Object() {nuban}, Me.getAccountFromNUBAN2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountFromNUBAN2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountFromNUBAN2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountFromNUBAN2Completed(Me, New getAccountFromNUBAN2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBalanceDetails", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBalanceDetails(ByVal acctnum As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getBalanceDetails", New Object() {acctnum})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBalanceDetailsAsync(ByVal acctnum As String)
            Me.getBalanceDetailsAsync(acctnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBalanceDetailsAsync(ByVal acctnum As String, ByVal userState As Object)
            If (Me.getBalanceDetailsOperationCompleted Is Nothing) Then
                Me.getBalanceDetailsOperationCompleted = AddressOf Me.OngetBalanceDetailsOperationCompleted
            End If
            Me.InvokeAsync("getBalanceDetails", New Object() {acctnum}, Me.getBalanceDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBalanceDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBalanceDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBalanceDetailsCompleted(Me, New getBalanceDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCusBalance", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCusBalance(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCusBalance", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCusBalanceAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String)
            Me.getCusBalanceAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCusBalanceAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal userState As Object)
            If (Me.getCusBalanceOperationCompleted Is Nothing) Then
                Me.getCusBalanceOperationCompleted = AddressOf Me.OngetCusBalanceOperationCompleted
            End If
            Me.InvokeAsync("getCusBalance", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code}, Me.getCusBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCusBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCusBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCusBalanceCompleted(Me, New getCusBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCusBal", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCusBal(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCusBal", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCusBalAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer)
            Me.getCusBalAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCusBalAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal userState As Object)
            If (Me.getCusBalOperationCompleted Is Nothing) Then
                Me.getCusBalOperationCompleted = AddressOf Me.OngetCusBalOperationCompleted
            End If
            Me.InvokeAsync("getCusBal", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code}, Me.getCusBalOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCusBalOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCusBalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCusBalCompleted(Me, New getCusBalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkOpLedger", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkOpLedger(ByVal led_code As String, ByVal ext_tra_flag As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("checkOpLedger", New Object() {led_code, ext_tra_flag})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkOpLedgerAsync(ByVal led_code As String, ByVal ext_tra_flag As String)
            Me.checkOpLedgerAsync(led_code, ext_tra_flag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkOpLedgerAsync(ByVal led_code As String, ByVal ext_tra_flag As String, ByVal userState As Object)
            If (Me.checkOpLedgerOperationCompleted Is Nothing) Then
                Me.checkOpLedgerOperationCompleted = AddressOf Me.OncheckOpLedgerOperationCompleted
            End If
            Me.InvokeAsync("checkOpLedger", New Object() {led_code, ext_tra_flag}, Me.checkOpLedgerOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckOpLedgerOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkOpLedgerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkOpLedgerCompleted(Me, New checkOpLedgerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkCusAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkCusAccount(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String) As Boolean
            Dim results() As Object = Me.Invoke("checkCusAccount", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkCusAccountAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String)
            Me.checkCusAccountAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkCusAccountAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal userState As Object)
            If (Me.checkCusAccountOperationCompleted Is Nothing) Then
                Me.checkCusAccountOperationCompleted = AddressOf Me.OncheckCusAccountOperationCompleted
            End If
            Me.InvokeAsync("checkCusAccount", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code}, Me.checkCusAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckCusAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkCusAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkCusAccountCompleted(Me, New checkCusAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTellerLimit", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTellerLimit(ByVal tell_id As String, ByVal bra_code As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getTellerLimit", New Object() {tell_id, bra_code})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTellerLimitAsync(ByVal tell_id As String, ByVal bra_code As String)
            Me.getTellerLimitAsync(tell_id, bra_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTellerLimitAsync(ByVal tell_id As String, ByVal bra_code As String, ByVal userState As Object)
            If (Me.getTellerLimitOperationCompleted Is Nothing) Then
                Me.getTellerLimitOperationCompleted = AddressOf Me.OngetTellerLimitOperationCompleted
            End If
            Me.InvokeAsync("getTellerLimit", New Object() {tell_id, bra_code}, Me.getTellerLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTellerLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTellerLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTellerLimitCompleted(Me, New getTellerLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getNubanAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getNubanAccount(ByVal Nubannum As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getNubanAccount", New Object() {Nubannum})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getNubanAccountAsync(ByVal Nubannum As String)
            Me.getNubanAccountAsync(Nubannum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getNubanAccountAsync(ByVal Nubannum As String, ByVal userState As Object)
            If (Me.getNubanAccountOperationCompleted Is Nothing) Then
                Me.getNubanAccountOperationCompleted = AddressOf Me.OngetNubanAccountOperationCompleted
            End If
            Me.InvokeAsync("getNubanAccount", New Object() {Nubannum}, Me.getNubanAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OngetNubanAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.getNubanAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getNubanAccountCompleted(Me, New getNubanAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getNuban", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getNuban(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getNuban", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getNubanAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String)
            Me.getNubanAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getNubanAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal userState As Object)
            If (Me.getNubanOperationCompleted Is Nothing) Then
                Me.getNubanOperationCompleted = AddressOf Me.OngetNubanOperationCompleted
            End If
            Me.InvokeAsync("getNuban", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code}, Me.getNubanOperationCompleted, userState)
        End Sub
        
        Private Sub OngetNubanOperationCompleted(ByVal arg As Object)
            If (Not (Me.getNubanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getNubanCompleted(Me, New getNubanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CusInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CusInfo(ByVal accnum As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CusInfo", New Object() {accnum})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CusInfoAsync(ByVal accnum As String)
            Me.CusInfoAsync(accnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CusInfoAsync(ByVal accnum As String, ByVal userState As Object)
            If (Me.CusInfoOperationCompleted Is Nothing) Then
                Me.CusInfoOperationCompleted = AddressOf Me.OnCusInfoOperationCompleted
            End If
            Me.InvokeAsync("CusInfo", New Object() {accnum}, Me.CusInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCusInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CusInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CusInfoCompleted(Me, New CusInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CusInfo1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CusInfo1(ByVal bracode As String, ByVal cusnum As String, ByVal curcode As String, ByVal ledcode As String, ByVal subacctcode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CusInfo1", New Object() {bracode, cusnum, curcode, ledcode, subacctcode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CusInfo1Async(ByVal bracode As String, ByVal cusnum As String, ByVal curcode As String, ByVal ledcode As String, ByVal subacctcode As String)
            Me.CusInfo1Async(bracode, cusnum, curcode, ledcode, subacctcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CusInfo1Async(ByVal bracode As String, ByVal cusnum As String, ByVal curcode As String, ByVal ledcode As String, ByVal subacctcode As String, ByVal userState As Object)
            If (Me.CusInfo1OperationCompleted Is Nothing) Then
                Me.CusInfo1OperationCompleted = AddressOf Me.OnCusInfo1OperationCompleted
            End If
            Me.InvokeAsync("CusInfo1", New Object() {bracode, cusnum, curcode, ledcode, subacctcode}, Me.CusInfo1OperationCompleted, userState)
        End Sub
        
        Private Sub OnCusInfo1OperationCompleted(ByVal arg As Object)
            If (Not (Me.CusInfo1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CusInfo1Completed(Me, New CusInfo1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccountDetails", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountDetails(ByVal acctnum As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAccountDetails", New Object() {acctnum})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountDetailsAsync(ByVal acctnum As String)
            Me.getAccountDetailsAsync(acctnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountDetailsAsync(ByVal acctnum As String, ByVal userState As Object)
            If (Me.getAccountDetailsOperationCompleted Is Nothing) Then
                Me.getAccountDetailsOperationCompleted = AddressOf Me.OngetAccountDetailsOperationCompleted
            End If
            Me.InvokeAsync("getAccountDetails", New Object() {acctnum}, Me.getAccountDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountDetailsCompleted(Me, New getAccountDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccountFullinfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountFullinfo(ByVal acctnum As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAccountFullinfo", New Object() {acctnum})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountFullinfoAsync(ByVal acctnum As String)
            Me.getAccountFullinfoAsync(acctnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountFullinfoAsync(ByVal acctnum As String, ByVal userState As Object)
            If (Me.getAccountFullinfoOperationCompleted Is Nothing) Then
                Me.getAccountFullinfoOperationCompleted = AddressOf Me.OngetAccountFullinfoOperationCompleted
            End If
            Me.InvokeAsync("getAccountFullinfo", New Object() {acctnum}, Me.getAccountFullinfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountFullinfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountFullinfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountFullinfoCompleted(Me, New getAccountFullinfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/validateChq", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function validateChq(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String) As Boolean
            Dim results() As Object = Me.Invoke("validateChq", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub validateChqAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String)
            Me.validateChqAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub validateChqAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String, ByVal userState As Object)
            If (Me.validateChqOperationCompleted Is Nothing) Then
                Me.validateChqOperationCompleted = AddressOf Me.OnvalidateChqOperationCompleted
            End If
            Me.InvokeAsync("validateChq", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum}, Me.validateChqOperationCompleted, userState)
        End Sub
        
        Private Sub OnvalidateChqOperationCompleted(ByVal arg As Object)
            If (Not (Me.validateChqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent validateChqCompleted(Me, New validateChqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isChequeUsed", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isChequeUsed(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String) As Boolean
            Dim results() As Object = Me.Invoke("isChequeUsed", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isChequeUsedAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String)
            Me.isChequeUsedAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isChequeUsedAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String, ByVal userState As Object)
            If (Me.isChequeUsedOperationCompleted Is Nothing) Then
                Me.isChequeUsedOperationCompleted = AddressOf Me.OnisChequeUsedOperationCompleted
            End If
            Me.InvokeAsync("isChequeUsed", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum}, Me.isChequeUsedOperationCompleted, userState)
        End Sub
        
        Private Sub OnisChequeUsedOperationCompleted(ByVal arg As Object)
            If (Not (Me.isChequeUsedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isChequeUsedCompleted(Me, New isChequeUsedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HasDetailsBeenPosted", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HasDetailsBeenPosted(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String, ByVal amtVal As Decimal, ByVal value_date As Date) As Boolean
            Dim results() As Object = Me.Invoke("HasDetailsBeenPosted", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum, amtVal, value_date})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HasDetailsBeenPostedAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String, ByVal amtVal As Decimal, ByVal value_date As Date)
            Me.HasDetailsBeenPostedAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum, amtVal, value_date, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HasDetailsBeenPostedAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String, ByVal amtVal As Decimal, ByVal value_date As Date, ByVal userState As Object)
            If (Me.HasDetailsBeenPostedOperationCompleted Is Nothing) Then
                Me.HasDetailsBeenPostedOperationCompleted = AddressOf Me.OnHasDetailsBeenPostedOperationCompleted
            End If
            Me.InvokeAsync("HasDetailsBeenPosted", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum, amtVal, value_date}, Me.HasDetailsBeenPostedOperationCompleted, userState)
        End Sub
        
        Private Sub OnHasDetailsBeenPostedOperationCompleted(ByVal arg As Object)
            If (Not (Me.HasDetailsBeenPostedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HasDetailsBeenPostedCompleted(Me, New HasDetailsBeenPostedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DetailsWithValuedate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DetailsWithValuedate(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String, ByVal amtVal As Decimal, ByVal value_date As Date) As Boolean
            Dim results() As Object = Me.Invoke("DetailsWithValuedate", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum, amtVal, value_date})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DetailsWithValuedateAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String, ByVal amtVal As Decimal, ByVal value_date As Date)
            Me.DetailsWithValuedateAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum, amtVal, value_date, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DetailsWithValuedateAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String, ByVal amtVal As Decimal, ByVal value_date As Date, ByVal userState As Object)
            If (Me.DetailsWithValuedateOperationCompleted Is Nothing) Then
                Me.DetailsWithValuedateOperationCompleted = AddressOf Me.OnDetailsWithValuedateOperationCompleted
            End If
            Me.InvokeAsync("DetailsWithValuedate", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum, amtVal, value_date}, Me.DetailsWithValuedateOperationCompleted, userState)
        End Sub
        
        Private Sub OnDetailsWithValuedateOperationCompleted(ByVal arg As Object)
            If (Not (Me.DetailsWithValuedateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DetailsWithValuedateCompleted(Me, New DetailsWithValuedateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBranches", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBranches() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getBranches", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBranchesAsync()
            Me.getBranchesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBranchesAsync(ByVal userState As Object)
            If (Me.getBranchesOperationCompleted Is Nothing) Then
                Me.getBranchesOperationCompleted = AddressOf Me.OngetBranchesOperationCompleted
            End If
            Me.InvokeAsync("getBranches", New Object(-1) {}, Me.getBranchesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBranchesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBranchesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBranchesCompleted(Me, New getBranchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBankNames", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBankNames() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getBankNames", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBankNamesAsync()
            Me.getBankNamesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBankNamesAsync(ByVal userState As Object)
            If (Me.getBankNamesOperationCompleted Is Nothing) Then
                Me.getBankNamesOperationCompleted = AddressOf Me.OngetBankNamesOperationCompleted
            End If
            Me.InvokeAsync("getBankNames", New Object(-1) {}, Me.getBankNamesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBankNamesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBankNamesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBankNamesCompleted(Me, New getBankNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getParallexCashDepotsitBankDetails", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getParallexCashDepotsitBankDetails(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal origt_tra_seq1 As String, ByVal tra_amt As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getParallexCashDepotsitBankDetails", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, origt_tra_seq1, tra_amt})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getParallexCashDepotsitBankDetailsAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal origt_tra_seq1 As String, ByVal tra_amt As String)
            Me.getParallexCashDepotsitBankDetailsAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, origt_tra_seq1, tra_amt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getParallexCashDepotsitBankDetailsAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal origt_tra_seq1 As String, ByVal tra_amt As String, ByVal userState As Object)
            If (Me.getParallexCashDepotsitBankDetailsOperationCompleted Is Nothing) Then
                Me.getParallexCashDepotsitBankDetailsOperationCompleted = AddressOf Me.OngetParallexCashDepotsitBankDetailsOperationCompleted
            End If
            Me.InvokeAsync("getParallexCashDepotsitBankDetails", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, origt_tra_seq1, tra_amt}, Me.getParallexCashDepotsitBankDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetParallexCashDepotsitBankDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getParallexCashDepotsitBankDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getParallexCashDepotsitBankDetailsCompleted(Me, New getParallexCashDepotsitBankDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getParallexChqBankDetails", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getParallexChqBankDetails(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal doc_num As String, ByVal tra_amt As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getParallexChqBankDetails", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, doc_num, tra_amt})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getParallexChqBankDetailsAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal doc_num As String, ByVal tra_amt As String)
            Me.getParallexChqBankDetailsAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, doc_num, tra_amt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getParallexChqBankDetailsAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal doc_num As String, ByVal tra_amt As String, ByVal userState As Object)
            If (Me.getParallexChqBankDetailsOperationCompleted Is Nothing) Then
                Me.getParallexChqBankDetailsOperationCompleted = AddressOf Me.OngetParallexChqBankDetailsOperationCompleted
            End If
            Me.InvokeAsync("getParallexChqBankDetails", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, doc_num, tra_amt}, Me.getParallexChqBankDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetParallexChqBankDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getParallexChqBankDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getParallexChqBankDetailsCompleted(Me, New getParallexChqBankDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsChequeDetailsonBanks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsChequeDetailsonBanks(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String, ByVal amtVal As Decimal, ByVal value_date As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("IsChequeDetailsonBanks", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum, amtVal, value_date})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsChequeDetailsonBanksAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String, ByVal amtVal As Decimal, ByVal value_date As Date)
            Me.IsChequeDetailsonBanksAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum, amtVal, value_date, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsChequeDetailsonBanksAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal docnum As String, ByVal amtVal As Decimal, ByVal value_date As Date, ByVal userState As Object)
            If (Me.IsChequeDetailsonBanksOperationCompleted Is Nothing) Then
                Me.IsChequeDetailsonBanksOperationCompleted = AddressOf Me.OnIsChequeDetailsonBanksOperationCompleted
            End If
            Me.InvokeAsync("IsChequeDetailsonBanks", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, docnum, amtVal, value_date}, Me.IsChequeDetailsonBanksOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsChequeDetailsonBanksOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsChequeDetailsonBanksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsChequeDetailsonBanksCompleted(Me, New IsChequeDetailsonBanksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkAccount(ByVal mobile As String, ByVal accnum As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("checkAccount", New Object() {mobile, accnum})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkAccountAsync(ByVal mobile As String, ByVal accnum As String)
            Me.checkAccountAsync(mobile, accnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkAccountAsync(ByVal mobile As String, ByVal accnum As String, ByVal userState As Object)
            If (Me.checkAccountOperationCompleted Is Nothing) Then
                Me.checkAccountOperationCompleted = AddressOf Me.OncheckAccountOperationCompleted
            End If
            Me.InvokeAsync("checkAccount", New Object() {mobile, accnum}, Me.checkAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkAccountCompleted(Me, New checkAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkMobile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkMobile(ByVal mobile As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("checkMobile", New Object() {mobile})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkMobileAsync(ByVal mobile As String)
            Me.checkMobileAsync(mobile, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkMobileAsync(ByVal mobile As String, ByVal userState As Object)
            If (Me.checkMobileOperationCompleted Is Nothing) Then
                Me.checkMobileOperationCompleted = AddressOf Me.OncheckMobileOperationCompleted
            End If
            Me.InvokeAsync("checkMobile", New Object() {mobile}, Me.checkMobileOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckMobileOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkMobileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkMobileCompleted(Me, New checkMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSMSAlertUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSMSAlertUser(ByVal mobile As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getSMSAlertUser", New Object() {mobile})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSMSAlertUserAsync(ByVal mobile As String)
            Me.getSMSAlertUserAsync(mobile, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSMSAlertUserAsync(ByVal mobile As String, ByVal userState As Object)
            If (Me.getSMSAlertUserOperationCompleted Is Nothing) Then
                Me.getSMSAlertUserOperationCompleted = AddressOf Me.OngetSMSAlertUserOperationCompleted
            End If
            Me.InvokeAsync("getSMSAlertUser", New Object() {mobile}, Me.getSMSAlertUserOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSMSAlertUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSMSAlertUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSMSAlertUserCompleted(Me, New getSMSAlertUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBalance", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBalance(ByVal accno As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getBalance", New Object() {accno})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBalanceAsync(ByVal accno As String)
            Me.getBalanceAsync(accno, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBalanceAsync(ByVal accno As String, ByVal userState As Object)
            If (Me.getBalanceOperationCompleted Is Nothing) Then
                Me.getBalanceOperationCompleted = AddressOf Me.OngetBalanceOperationCompleted
            End If
            Me.InvokeAsync("getBalance", New Object() {accno}, Me.getBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBalanceCompleted(Me, New getBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBalance2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBalance2(ByVal bracode As String, ByVal cusnum As String, ByVal curcode As String, ByVal ledcode As String, ByVal subacctcode As String) As String
            Dim results() As Object = Me.Invoke("getBalance2", New Object() {bracode, cusnum, curcode, ledcode, subacctcode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBalance2Async(ByVal bracode As String, ByVal cusnum As String, ByVal curcode As String, ByVal ledcode As String, ByVal subacctcode As String)
            Me.getBalance2Async(bracode, cusnum, curcode, ledcode, subacctcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBalance2Async(ByVal bracode As String, ByVal cusnum As String, ByVal curcode As String, ByVal ledcode As String, ByVal subacctcode As String, ByVal userState As Object)
            If (Me.getBalance2OperationCompleted Is Nothing) Then
                Me.getBalance2OperationCompleted = AddressOf Me.OngetBalance2OperationCompleted
            End If
            Me.InvokeAsync("getBalance2", New Object() {bracode, cusnum, curcode, ledcode, subacctcode}, Me.getBalance2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetBalance2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getBalance2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBalance2Completed(Me, New getBalance2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getStatement", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getStatement(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_code As String, ByVal rowCnt As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getStatement", New Object() {bra_code, cus_num, cur_code, led_code, sub_code, rowCnt})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStatementAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_code As String, ByVal rowCnt As String)
            Me.getStatementAsync(bra_code, cus_num, cur_code, led_code, sub_code, rowCnt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStatementAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_code As String, ByVal rowCnt As String, ByVal userState As Object)
            If (Me.getStatementOperationCompleted Is Nothing) Then
                Me.getStatementOperationCompleted = AddressOf Me.OngetStatementOperationCompleted
            End If
            Me.InvokeAsync("getStatement", New Object() {bra_code, cus_num, cur_code, led_code, sub_code, rowCnt}, Me.getStatementOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStatementOperationCompleted(ByVal arg As Object)
            If (Not (Me.getStatementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStatementCompleted(Me, New getStatementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSMSAlertReg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSMSAlertReg(ByVal mobile As String, ByVal accnum As String) As Boolean
            Dim results() As Object = Me.Invoke("getSMSAlertReg", New Object() {mobile, accnum})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSMSAlertRegAsync(ByVal mobile As String, ByVal accnum As String)
            Me.getSMSAlertRegAsync(mobile, accnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSMSAlertRegAsync(ByVal mobile As String, ByVal accnum As String, ByVal userState As Object)
            If (Me.getSMSAlertRegOperationCompleted Is Nothing) Then
                Me.getSMSAlertRegOperationCompleted = AddressOf Me.OngetSMSAlertRegOperationCompleted
            End If
            Me.InvokeAsync("getSMSAlertReg", New Object() {mobile, accnum}, Me.getSMSAlertRegOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSMSAlertRegOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSMSAlertRegCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSMSAlertRegCompleted(Me, New getSMSAlertRegCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccount2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccount2(ByVal accnum As String) As Account
            Dim results() As Object = Me.Invoke("getAccount2", New Object() {accnum})
            Return CType(results(0),Account)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccount2Async(ByVal accnum As String)
            Me.getAccount2Async(accnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccount2Async(ByVal accnum As String, ByVal userState As Object)
            If (Me.getAccount2OperationCompleted Is Nothing) Then
                Me.getAccount2OperationCompleted = AddressOf Me.OngetAccount2OperationCompleted
            End If
            Me.InvokeAsync("getAccount2", New Object() {accnum}, Me.getAccount2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccount2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccount2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccount2Completed(Me, New getAccount2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getFullAcct", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getFullAcct(ByVal Nubannum As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getFullAcct", New Object() {Nubannum})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getFullAcctAsync(ByVal Nubannum As String)
            Me.getFullAcctAsync(Nubannum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getFullAcctAsync(ByVal Nubannum As String, ByVal userState As Object)
            If (Me.getFullAcctOperationCompleted Is Nothing) Then
                Me.getFullAcctOperationCompleted = AddressOf Me.OngetFullAcctOperationCompleted
            End If
            Me.InvokeAsync("getFullAcct", New Object() {Nubannum}, Me.getFullAcctOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFullAcctOperationCompleted(ByVal arg As Object)
            If (Not (Me.getFullAcctCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFullAcctCompleted(Me, New getFullAcctCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/gettellerstatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function gettellerstatus(ByVal tellid As String) As Boolean
            Dim results() As Object = Me.Invoke("gettellerstatus", New Object() {tellid})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub gettellerstatusAsync(ByVal tellid As String)
            Me.gettellerstatusAsync(tellid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub gettellerstatusAsync(ByVal tellid As String, ByVal userState As Object)
            If (Me.gettellerstatusOperationCompleted Is Nothing) Then
                Me.gettellerstatusOperationCompleted = AddressOf Me.OngettellerstatusOperationCompleted
            End If
            Me.InvokeAsync("gettellerstatus", New Object() {tellid}, Me.gettellerstatusOperationCompleted, userState)
        End Sub
        
        Private Sub OngettellerstatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.gettellerstatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent gettellerstatusCompleted(Me, New gettellerstatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkTellerRole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkTellerRole(ByVal bra_code As String, ByVal tellid As String, ByVal roleID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("checkTellerRole", New Object() {bra_code, tellid, roleID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkTellerRoleAsync(ByVal bra_code As String, ByVal tellid As String, ByVal roleID As Integer)
            Me.checkTellerRoleAsync(bra_code, tellid, roleID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkTellerRoleAsync(ByVal bra_code As String, ByVal tellid As String, ByVal roleID As Integer, ByVal userState As Object)
            If (Me.checkTellerRoleOperationCompleted Is Nothing) Then
                Me.checkTellerRoleOperationCompleted = AddressOf Me.OncheckTellerRoleOperationCompleted
            End If
            Me.InvokeAsync("checkTellerRole", New Object() {bra_code, tellid, roleID}, Me.checkTellerRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckTellerRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkTellerRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkTellerRoleCompleted(Me, New checkTellerRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getFullAcctName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getFullAcctName(ByVal acctnum As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getFullAcctName", New Object() {acctnum})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getFullAcctNameAsync(ByVal acctnum As String)
            Me.getFullAcctNameAsync(acctnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getFullAcctNameAsync(ByVal acctnum As String, ByVal userState As Object)
            If (Me.getFullAcctNameOperationCompleted Is Nothing) Then
                Me.getFullAcctNameOperationCompleted = AddressOf Me.OngetFullAcctNameOperationCompleted
            End If
            Me.InvokeAsync("getFullAcctName", New Object() {acctnum}, Me.getFullAcctNameOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFullAcctNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.getFullAcctNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFullAcctNameCompleted(Me, New getFullAcctNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSTACODE", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSTACODE(ByVal bracode As String, ByVal cusnum As String, ByVal curcode As String, ByVal ledcode As String, ByVal subacctcode As String) As String
            Dim results() As Object = Me.Invoke("getSTACODE", New Object() {bracode, cusnum, curcode, ledcode, subacctcode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSTACODEAsync(ByVal bracode As String, ByVal cusnum As String, ByVal curcode As String, ByVal ledcode As String, ByVal subacctcode As String)
            Me.getSTACODEAsync(bracode, cusnum, curcode, ledcode, subacctcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSTACODEAsync(ByVal bracode As String, ByVal cusnum As String, ByVal curcode As String, ByVal ledcode As String, ByVal subacctcode As String, ByVal userState As Object)
            If (Me.getSTACODEOperationCompleted Is Nothing) Then
                Me.getSTACODEOperationCompleted = AddressOf Me.OngetSTACODEOperationCompleted
            End If
            Me.InvokeAsync("getSTACODE", New Object() {bracode, cusnum, curcode, ledcode, subacctcode}, Me.getSTACODEOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSTACODEOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSTACODECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSTACODECompleted(Me, New getSTACODECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DATCONV_getCHE_DIG", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DATCONV_getCHE_DIG(ByVal cusnum As String, ByVal bracode As String) As String
            Dim results() As Object = Me.Invoke("DATCONV_getCHE_DIG", New Object() {cusnum, bracode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getCHE_DIGAsync(ByVal cusnum As String, ByVal bracode As String)
            Me.DATCONV_getCHE_DIGAsync(cusnum, bracode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getCHE_DIGAsync(ByVal cusnum As String, ByVal bracode As String, ByVal userState As Object)
            If (Me.DATCONV_getCHE_DIGOperationCompleted Is Nothing) Then
                Me.DATCONV_getCHE_DIGOperationCompleted = AddressOf Me.OnDATCONV_getCHE_DIGOperationCompleted
            End If
            Me.InvokeAsync("DATCONV_getCHE_DIG", New Object() {cusnum, bracode}, Me.DATCONV_getCHE_DIGOperationCompleted, userState)
        End Sub
        
        Private Sub OnDATCONV_getCHE_DIGOperationCompleted(ByVal arg As Object)
            If (Not (Me.DATCONV_getCHE_DIGCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DATCONV_getCHE_DIGCompleted(Me, New DATCONV_getCHE_DIGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DATCONV_getCustomerName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DATCONV_getCustomerName(ByVal cusnum As String, ByVal bracode As String) As String
            Dim results() As Object = Me.Invoke("DATCONV_getCustomerName", New Object() {cusnum, bracode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getCustomerNameAsync(ByVal cusnum As String, ByVal bracode As String)
            Me.DATCONV_getCustomerNameAsync(cusnum, bracode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getCustomerNameAsync(ByVal cusnum As String, ByVal bracode As String, ByVal userState As Object)
            If (Me.DATCONV_getCustomerNameOperationCompleted Is Nothing) Then
                Me.DATCONV_getCustomerNameOperationCompleted = AddressOf Me.OnDATCONV_getCustomerNameOperationCompleted
            End If
            Me.InvokeAsync("DATCONV_getCustomerName", New Object() {cusnum, bracode}, Me.DATCONV_getCustomerNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnDATCONV_getCustomerNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.DATCONV_getCustomerNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DATCONV_getCustomerNameCompleted(Me, New DATCONV_getCustomerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DATCONV_getOVERDRAWN", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DATCONV_getOVERDRAWN(ByVal ledcode As String) As String
            Dim results() As Object = Me.Invoke("DATCONV_getOVERDRAWN", New Object() {ledcode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getOVERDRAWNAsync(ByVal ledcode As String)
            Me.DATCONV_getOVERDRAWNAsync(ledcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getOVERDRAWNAsync(ByVal ledcode As String, ByVal userState As Object)
            If (Me.DATCONV_getOVERDRAWNOperationCompleted Is Nothing) Then
                Me.DATCONV_getOVERDRAWNOperationCompleted = AddressOf Me.OnDATCONV_getOVERDRAWNOperationCompleted
            End If
            Me.InvokeAsync("DATCONV_getOVERDRAWN", New Object() {ledcode}, Me.DATCONV_getOVERDRAWNOperationCompleted, userState)
        End Sub
        
        Private Sub OnDATCONV_getOVERDRAWNOperationCompleted(ByVal arg As Object)
            If (Not (Me.DATCONV_getOVERDRAWNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DATCONV_getOVERDRAWNCompleted(Me, New DATCONV_getOVERDRAWNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReportsPortalDDL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportsPortalDDL(ByVal strsql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReportsPortalDDL", New Object() {strsql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportsPortalDDLAsync(ByVal strsql As String)
            Me.ReportsPortalDDLAsync(strsql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportsPortalDDLAsync(ByVal strsql As String, ByVal userState As Object)
            If (Me.ReportsPortalDDLOperationCompleted Is Nothing) Then
                Me.ReportsPortalDDLOperationCompleted = AddressOf Me.OnReportsPortalDDLOperationCompleted
            End If
            Me.InvokeAsync("ReportsPortalDDL", New Object() {strsql}, Me.ReportsPortalDDLOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportsPortalDDLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportsPortalDDLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportsPortalDDLCompleted(Me, New ReportsPortalDDLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReportsPortalDML", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportsPortalDML(ByVal storedProcedure As String, ByVal fromDate As String, ByVal toDate As String, ByVal bracode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReportsPortalDML", New Object() {storedProcedure, fromDate, toDate, bracode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportsPortalDMLAsync(ByVal storedProcedure As String, ByVal fromDate As String, ByVal toDate As String, ByVal bracode As String)
            Me.ReportsPortalDMLAsync(storedProcedure, fromDate, toDate, bracode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportsPortalDMLAsync(ByVal storedProcedure As String, ByVal fromDate As String, ByVal toDate As String, ByVal bracode As String, ByVal userState As Object)
            If (Me.ReportsPortalDMLOperationCompleted Is Nothing) Then
                Me.ReportsPortalDMLOperationCompleted = AddressOf Me.OnReportsPortalDMLOperationCompleted
            End If
            Me.InvokeAsync("ReportsPortalDML", New Object() {storedProcedure, fromDate, toDate, bracode}, Me.ReportsPortalDMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportsPortalDMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportsPortalDMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportsPortalDMLCompleted(Me, New ReportsPortalDMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReportsPortalSQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportsPortalSQL(ByVal connstr As String, ByVal strsql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReportsPortalSQL", New Object() {connstr, strsql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportsPortalSQLAsync(ByVal connstr As String, ByVal strsql As String)
            Me.ReportsPortalSQLAsync(connstr, strsql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportsPortalSQLAsync(ByVal connstr As String, ByVal strsql As String, ByVal userState As Object)
            If (Me.ReportsPortalSQLOperationCompleted Is Nothing) Then
                Me.ReportsPortalSQLOperationCompleted = AddressOf Me.OnReportsPortalSQLOperationCompleted
            End If
            Me.InvokeAsync("ReportsPortalSQL", New Object() {connstr, strsql}, Me.ReportsPortalSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportsPortalSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportsPortalSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportsPortalSQLCompleted(Me, New ReportsPortalSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DATCONV_getUNPROCESSED", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DATCONV_getUNPROCESSED(ByVal dater As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DATCONV_getUNPROCESSED", New Object() {dater})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getUNPROCESSEDAsync(ByVal dater As String)
            Me.DATCONV_getUNPROCESSEDAsync(dater, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getUNPROCESSEDAsync(ByVal dater As String, ByVal userState As Object)
            If (Me.DATCONV_getUNPROCESSEDOperationCompleted Is Nothing) Then
                Me.DATCONV_getUNPROCESSEDOperationCompleted = AddressOf Me.OnDATCONV_getUNPROCESSEDOperationCompleted
            End If
            Me.InvokeAsync("DATCONV_getUNPROCESSED", New Object() {dater}, Me.DATCONV_getUNPROCESSEDOperationCompleted, userState)
        End Sub
        
        Private Sub OnDATCONV_getUNPROCESSEDOperationCompleted(ByVal arg As Object)
            If (Not (Me.DATCONV_getUNPROCESSEDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DATCONV_getUNPROCESSEDCompleted(Me, New DATCONV_getUNPROCESSEDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DATCONV_getREPORT29", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DATCONV_getREPORT29(ByVal dater As String, ByVal compcode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DATCONV_getREPORT29", New Object() {dater, compcode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getREPORT29Async(ByVal dater As String, ByVal compcode As String)
            Me.DATCONV_getREPORT29Async(dater, compcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getREPORT29Async(ByVal dater As String, ByVal compcode As String, ByVal userState As Object)
            If (Me.DATCONV_getREPORT29OperationCompleted Is Nothing) Then
                Me.DATCONV_getREPORT29OperationCompleted = AddressOf Me.OnDATCONV_getREPORT29OperationCompleted
            End If
            Me.InvokeAsync("DATCONV_getREPORT29", New Object() {dater, compcode}, Me.DATCONV_getREPORT29OperationCompleted, userState)
        End Sub
        
        Private Sub OnDATCONV_getREPORT29OperationCompleted(ByVal arg As Object)
            If (Not (Me.DATCONV_getREPORT29CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DATCONV_getREPORT29Completed(Me, New DATCONV_getREPORT29CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCustomeronSMS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCustomeronSMS(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCustomeronSMS", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCustomeronSMSAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String)
            Me.getCustomeronSMSAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCustomeronSMSAsync(ByVal bra_code As String, ByVal cus_num As String, ByVal cur_code As String, ByVal led_code As String, ByVal sub_acct_code As String, ByVal userState As Object)
            If (Me.getCustomeronSMSOperationCompleted Is Nothing) Then
                Me.getCustomeronSMSOperationCompleted = AddressOf Me.OngetCustomeronSMSOperationCompleted
            End If
            Me.InvokeAsync("getCustomeronSMS", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code}, Me.getCustomeronSMSOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCustomeronSMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCustomeronSMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCustomeronSMSCompleted(Me, New getCustomeronSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DATCONV_getRESTIND", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DATCONV_getRESTIND(ByVal cusnum As String) As String
            Dim results() As Object = Me.Invoke("DATCONV_getRESTIND", New Object() {cusnum})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getRESTINDAsync(ByVal cusnum As String)
            Me.DATCONV_getRESTINDAsync(cusnum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getRESTINDAsync(ByVal cusnum As String, ByVal userState As Object)
            If (Me.DATCONV_getRESTINDOperationCompleted Is Nothing) Then
                Me.DATCONV_getRESTINDOperationCompleted = AddressOf Me.OnDATCONV_getRESTINDOperationCompleted
            End If
            Me.InvokeAsync("DATCONV_getRESTIND", New Object() {cusnum}, Me.DATCONV_getRESTINDOperationCompleted, userState)
        End Sub
        
        Private Sub OnDATCONV_getRESTINDOperationCompleted(ByVal arg As Object)
            If (Not (Me.DATCONV_getRESTINDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DATCONV_getRESTINDCompleted(Me, New DATCONV_getRESTINDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DATCONV_getDESENG", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DATCONV_getDESENG(ByVal code As String) As String
            Dim results() As Object = Me.Invoke("DATCONV_getDESENG", New Object() {code})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getDESENGAsync(ByVal code As String)
            Me.DATCONV_getDESENGAsync(code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getDESENGAsync(ByVal code As String, ByVal userState As Object)
            If (Me.DATCONV_getDESENGOperationCompleted Is Nothing) Then
                Me.DATCONV_getDESENGOperationCompleted = AddressOf Me.OnDATCONV_getDESENGOperationCompleted
            End If
            Me.InvokeAsync("DATCONV_getDESENG", New Object() {code}, Me.DATCONV_getDESENGOperationCompleted, userState)
        End Sub
        
        Private Sub OnDATCONV_getDESENGOperationCompleted(ByVal arg As Object)
            If (Not (Me.DATCONV_getDESENGCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DATCONV_getDESENGCompleted(Me, New DATCONV_getDESENGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DATCONV_getBracodeFromTellerId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DATCONV_getBracodeFromTellerId(ByVal tellerid As String) As String
            Dim results() As Object = Me.Invoke("DATCONV_getBracodeFromTellerId", New Object() {tellerid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getBracodeFromTellerIdAsync(ByVal tellerid As String)
            Me.DATCONV_getBracodeFromTellerIdAsync(tellerid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DATCONV_getBracodeFromTellerIdAsync(ByVal tellerid As String, ByVal userState As Object)
            If (Me.DATCONV_getBracodeFromTellerIdOperationCompleted Is Nothing) Then
                Me.DATCONV_getBracodeFromTellerIdOperationCompleted = AddressOf Me.OnDATCONV_getBracodeFromTellerIdOperationCompleted
            End If
            Me.InvokeAsync("DATCONV_getBracodeFromTellerId", New Object() {tellerid}, Me.DATCONV_getBracodeFromTellerIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnDATCONV_getBracodeFromTellerIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.DATCONV_getBracodeFromTellerIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DATCONV_getBracodeFromTellerIdCompleted(Me, New DATCONV_getBracodeFromTellerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CUSREM_delTxn", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CUSREM_delTxn() As Boolean
            Dim results() As Object = Me.Invoke("CUSREM_delTxn", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CUSREM_delTxnAsync()
            Me.CUSREM_delTxnAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CUSREM_delTxnAsync(ByVal userState As Object)
            If (Me.CUSREM_delTxnOperationCompleted Is Nothing) Then
                Me.CUSREM_delTxnOperationCompleted = AddressOf Me.OnCUSREM_delTxnOperationCompleted
            End If
            Me.InvokeAsync("CUSREM_delTxn", New Object(-1) {}, Me.CUSREM_delTxnOperationCompleted, userState)
        End Sub
        
        Private Sub OnCUSREM_delTxnOperationCompleted(ByVal arg As Object)
            If (Not (Me.CUSREM_delTxnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CUSREM_delTxnCompleted(Me, New CUSREM_delTxnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CUSREM_InsertTxn", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CUSREM_InsertTxn(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal cname As String) As Boolean
            Dim results() As Object = Me.Invoke("CUSREM_InsertTxn", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, cname})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CUSREM_InsertTxnAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal cname As String)
            Me.CUSREM_InsertTxnAsync(bra_code, cus_num, cur_code, led_code, sub_acct_code, cname, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CUSREM_InsertTxnAsync(ByVal bra_code As Integer, ByVal cus_num As Long, ByVal cur_code As Integer, ByVal led_code As Integer, ByVal sub_acct_code As Integer, ByVal cname As String, ByVal userState As Object)
            If (Me.CUSREM_InsertTxnOperationCompleted Is Nothing) Then
                Me.CUSREM_InsertTxnOperationCompleted = AddressOf Me.OnCUSREM_InsertTxnOperationCompleted
            End If
            Me.InvokeAsync("CUSREM_InsertTxn", New Object() {bra_code, cus_num, cur_code, led_code, sub_acct_code, cname}, Me.CUSREM_InsertTxnOperationCompleted, userState)
        End Sub
        
        Private Sub OnCUSREM_InsertTxnOperationCompleted(ByVal arg As Object)
            If (Not (Me.CUSREM_InsertTxnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CUSREM_InsertTxnCompleted(Me, New CUSREM_InsertTxnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CUSREM_getCustomerRecs", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CUSREM_getCustomerRecs() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CUSREM_getCustomerRecs", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CUSREM_getCustomerRecsAsync()
            Me.CUSREM_getCustomerRecsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CUSREM_getCustomerRecsAsync(ByVal userState As Object)
            If (Me.CUSREM_getCustomerRecsOperationCompleted Is Nothing) Then
                Me.CUSREM_getCustomerRecsOperationCompleted = AddressOf Me.OnCUSREM_getCustomerRecsOperationCompleted
            End If
            Me.InvokeAsync("CUSREM_getCustomerRecs", New Object(-1) {}, Me.CUSREM_getCustomerRecsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCUSREM_getCustomerRecsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CUSREM_getCustomerRecsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CUSREM_getCustomerRecsCompleted(Me, New CUSREM_getCustomerRecsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CUSREM_process", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CUSREM_process() As String
            Dim results() As Object = Me.Invoke("CUSREM_process", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CUSREM_processAsync()
            Me.CUSREM_processAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CUSREM_processAsync(ByVal userState As Object)
            If (Me.CUSREM_processOperationCompleted Is Nothing) Then
                Me.CUSREM_processOperationCompleted = AddressOf Me.OnCUSREM_processOperationCompleted
            End If
            Me.InvokeAsync("CUSREM_process", New Object(-1) {}, Me.CUSREM_processOperationCompleted, userState)
        End Sub
        
        Private Sub OnCUSREM_processOperationCompleted(ByVal arg As Object)
            If (Not (Me.CUSREM_processCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CUSREM_processCompleted(Me, New CUSREM_processCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CUSREM_process2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CUSREM_process2(ByVal BRACODE As Long, ByVal CUSNUM As Long, ByVal CURCODE As Long, ByVal LEDCODE As Long, ByVal SUBACCTCODE As Long) As String
            Dim results() As Object = Me.Invoke("CUSREM_process2", New Object() {BRACODE, CUSNUM, CURCODE, LEDCODE, SUBACCTCODE})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CUSREM_process2Async(ByVal BRACODE As Long, ByVal CUSNUM As Long, ByVal CURCODE As Long, ByVal LEDCODE As Long, ByVal SUBACCTCODE As Long)
            Me.CUSREM_process2Async(BRACODE, CUSNUM, CURCODE, LEDCODE, SUBACCTCODE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CUSREM_process2Async(ByVal BRACODE As Long, ByVal CUSNUM As Long, ByVal CURCODE As Long, ByVal LEDCODE As Long, ByVal SUBACCTCODE As Long, ByVal userState As Object)
            If (Me.CUSREM_process2OperationCompleted Is Nothing) Then
                Me.CUSREM_process2OperationCompleted = AddressOf Me.OnCUSREM_process2OperationCompleted
            End If
            Me.InvokeAsync("CUSREM_process2", New Object() {BRACODE, CUSNUM, CURCODE, LEDCODE, SUBACCTCODE}, Me.CUSREM_process2OperationCompleted, userState)
        End Sub
        
        Private Sub OnCUSREM_process2OperationCompleted(ByVal arg As Object)
            If (Not (Me.CUSREM_process2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CUSREM_process2Completed(Me, New CUSREM_process2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18331"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Account
        
        Private bra_codeField As String
        
        Private cus_numField As String
        
        Private cur_codeField As String
        
        Private led_codeField As String
        
        Private sub_acct_codeField As String
        
        Private cus_sho_nameField As String
        
        Private emailField As String
        
        '''<remarks/>
        Public Property bra_code() As String
            Get
                Return Me.bra_codeField
            End Get
            Set
                Me.bra_codeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property cus_num() As String
            Get
                Return Me.cus_numField
            End Get
            Set
                Me.cus_numField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property cur_code() As String
            Get
                Return Me.cur_codeField
            End Get
            Set
                Me.cur_codeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property led_code() As String
            Get
                Return Me.led_codeField
            End Get
            Set
                Me.led_codeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property sub_acct_code() As String
            Get
                Return Me.sub_acct_codeField
            End Get
            Set
                Me.sub_acct_codeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property cus_sho_name() As String
            Get
                Return Me.cus_sho_nameField
            End Get
            Set
                Me.cus_sho_nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getBalForDateCompletedEventHandler(ByVal sender As Object, ByVal e As getBalForDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBalForDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAvgBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As getAvgBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAvgBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAvgBalanceTableCompletedEventHandler(ByVal sender As Object, ByVal e As getAvgBalanceTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAvgBalanceTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAvgBalanceTableMonthCompletedEventHandler(ByVal sender As Object, ByVal e As getAvgBalanceTableMonthCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAvgBalanceTableMonthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAccountInfoCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAccountInfo2CompletedEventHandler(ByVal sender As Object, ByVal e As getAccountInfo2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountInfo2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAccountStatusCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getRatesCompletedEventHandler(ByVal sender As Object, ByVal e As getRatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getRatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAccountByNUBANCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountByNUBANCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountByNUBANCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getHumanManagerInfoCompletedEventHandler(ByVal sender As Object, ByVal e As getHumanManagerInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getHumanManagerInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getHumanManagerDepartmentsCompletedEventHandler(ByVal sender As Object, ByVal e As getHumanManagerDepartmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getHumanManagerDepartmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getHumanManagerFunctionsCompletedEventHandler(ByVal sender As Object, ByVal e As getHumanManagerFunctionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getHumanManagerFunctionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getHumanManagerGradesCompletedEventHandler(ByVal sender As Object, ByVal e As getHumanManagerGradesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getHumanManagerGradesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getBankLedgersCompletedEventHandler(ByVal sender As Object, ByVal e As getBankLedgersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBankLedgersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAccountCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAccountNameCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAccountFromNUBANCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountFromNUBANCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountFromNUBANCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAccountFromNUBAN2CompletedEventHandler(ByVal sender As Object, ByVal e As getAccountFromNUBAN2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountFromNUBAN2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getBalanceDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As getBalanceDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBalanceDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getCusBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As getCusBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCusBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getCusBalCompletedEventHandler(ByVal sender As Object, ByVal e As getCusBalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCusBalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub checkOpLedgerCompletedEventHandler(ByVal sender As Object, ByVal e As checkOpLedgerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkOpLedgerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub checkCusAccountCompletedEventHandler(ByVal sender As Object, ByVal e As checkCusAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkCusAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getTellerLimitCompletedEventHandler(ByVal sender As Object, ByVal e As getTellerLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTellerLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getNubanAccountCompletedEventHandler(ByVal sender As Object, ByVal e As getNubanAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getNubanAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getNubanCompletedEventHandler(ByVal sender As Object, ByVal e As getNubanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getNubanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub CusInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CusInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CusInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub CusInfo1CompletedEventHandler(ByVal sender As Object, ByVal e As CusInfo1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CusInfo1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAccountDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAccountFullinfoCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountFullinfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountFullinfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub validateChqCompletedEventHandler(ByVal sender As Object, ByVal e As validateChqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class validateChqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub isChequeUsedCompletedEventHandler(ByVal sender As Object, ByVal e As isChequeUsedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isChequeUsedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub HasDetailsBeenPostedCompletedEventHandler(ByVal sender As Object, ByVal e As HasDetailsBeenPostedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HasDetailsBeenPostedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub DetailsWithValuedateCompletedEventHandler(ByVal sender As Object, ByVal e As DetailsWithValuedateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DetailsWithValuedateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getBranchesCompletedEventHandler(ByVal sender As Object, ByVal e As getBranchesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBranchesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getBankNamesCompletedEventHandler(ByVal sender As Object, ByVal e As getBankNamesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBankNamesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getParallexCashDepotsitBankDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As getParallexCashDepotsitBankDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getParallexCashDepotsitBankDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getParallexChqBankDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As getParallexChqBankDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getParallexChqBankDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub IsChequeDetailsonBanksCompletedEventHandler(ByVal sender As Object, ByVal e As IsChequeDetailsonBanksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsChequeDetailsonBanksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub checkAccountCompletedEventHandler(ByVal sender As Object, ByVal e As checkAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub checkMobileCompletedEventHandler(ByVal sender As Object, ByVal e As checkMobileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkMobileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getSMSAlertUserCompletedEventHandler(ByVal sender As Object, ByVal e As getSMSAlertUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSMSAlertUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As getBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getBalance2CompletedEventHandler(ByVal sender As Object, ByVal e As getBalance2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBalance2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getStatementCompletedEventHandler(ByVal sender As Object, ByVal e As getStatementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getStatementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getSMSAlertRegCompletedEventHandler(ByVal sender As Object, ByVal e As getSMSAlertRegCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSMSAlertRegCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getAccount2CompletedEventHandler(ByVal sender As Object, ByVal e As getAccount2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccount2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Account
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Account)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getFullAcctCompletedEventHandler(ByVal sender As Object, ByVal e As getFullAcctCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getFullAcctCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub gettellerstatusCompletedEventHandler(ByVal sender As Object, ByVal e As gettellerstatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class gettellerstatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub checkTellerRoleCompletedEventHandler(ByVal sender As Object, ByVal e As checkTellerRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkTellerRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getFullAcctNameCompletedEventHandler(ByVal sender As Object, ByVal e As getFullAcctNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getFullAcctNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getSTACODECompletedEventHandler(ByVal sender As Object, ByVal e As getSTACODECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSTACODECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub DATCONV_getCHE_DIGCompletedEventHandler(ByVal sender As Object, ByVal e As DATCONV_getCHE_DIGCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DATCONV_getCHE_DIGCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub DATCONV_getCustomerNameCompletedEventHandler(ByVal sender As Object, ByVal e As DATCONV_getCustomerNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DATCONV_getCustomerNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub DATCONV_getOVERDRAWNCompletedEventHandler(ByVal sender As Object, ByVal e As DATCONV_getOVERDRAWNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DATCONV_getOVERDRAWNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub ReportsPortalDDLCompletedEventHandler(ByVal sender As Object, ByVal e As ReportsPortalDDLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportsPortalDDLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub ReportsPortalDMLCompletedEventHandler(ByVal sender As Object, ByVal e As ReportsPortalDMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportsPortalDMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub ReportsPortalSQLCompletedEventHandler(ByVal sender As Object, ByVal e As ReportsPortalSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportsPortalSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub DATCONV_getUNPROCESSEDCompletedEventHandler(ByVal sender As Object, ByVal e As DATCONV_getUNPROCESSEDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DATCONV_getUNPROCESSEDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub DATCONV_getREPORT29CompletedEventHandler(ByVal sender As Object, ByVal e As DATCONV_getREPORT29CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DATCONV_getREPORT29CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub getCustomeronSMSCompletedEventHandler(ByVal sender As Object, ByVal e As getCustomeronSMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCustomeronSMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub DATCONV_getRESTINDCompletedEventHandler(ByVal sender As Object, ByVal e As DATCONV_getRESTINDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DATCONV_getRESTINDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub DATCONV_getDESENGCompletedEventHandler(ByVal sender As Object, ByVal e As DATCONV_getDESENGCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DATCONV_getDESENGCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub DATCONV_getBracodeFromTellerIdCompletedEventHandler(ByVal sender As Object, ByVal e As DATCONV_getBracodeFromTellerIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DATCONV_getBracodeFromTellerIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub CUSREM_delTxnCompletedEventHandler(ByVal sender As Object, ByVal e As CUSREM_delTxnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CUSREM_delTxnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub CUSREM_InsertTxnCompletedEventHandler(ByVal sender As Object, ByVal e As CUSREM_InsertTxnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CUSREM_InsertTxnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub CUSREM_getCustomerRecsCompletedEventHandler(ByVal sender As Object, ByVal e As CUSREM_getCustomerRecsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CUSREM_getCustomerRecsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub CUSREM_processCompletedEventHandler(ByVal sender As Object, ByVal e As CUSREM_processCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CUSREM_processCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331")>  _
    Public Delegate Sub CUSREM_process2CompletedEventHandler(ByVal sender As Object, ByVal e As CUSREM_process2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18331"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CUSREM_process2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
