Imports System.Data.SqlClient
Imports System.Data

Partial Class SelfService_Selfservice
    Inherits System.Web.UI.Page

    Protected Sub btnUnlock_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnUnlock.Click
        Dim reqid As String = txtReqIDUnlock.Text
        Dim reqidnum As Long = 0
        If reqid.Contains(SwiftConstants.WORKFLOW_ID_PREFIX) Then

            reqidnum = Convert.ToInt64(reqid.Substring(SwiftConstants.WORKFLOW_ID_PREFIX.Length))
        Else
            reqidnum = Convert.ToInt64(reqid)
        End If

        If SwiftUtils.UnlockFtRequest(reqidnum, 1) Then
            lblRequestUnlock.Text = "<font color=blue>Successfully Unlocked The Request.</font>"
        Else
            lblRequestUnlock.Text = "<font color=red>Could Not Successfully Unlock Request. Please try again.</font>"
        End If
    End Sub

    Protected Sub btnResolveNoSwiftGeneration_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnResolveNoSwiftGeneration.Click

        lblNoSwiftMsg.Text = String.Empty
        Dim reqid As String = txtSendersRefNoSwift.Text
        Dim reqidnum As Long = 0
        If reqid.Contains(SwiftConstants.WORKFLOW_ID_PREFIX) Then

            reqidnum = Convert.ToInt64(reqid.Substring(SwiftConstants.WORKFLOW_ID_PREFIX.Length))
        Else
            reqidnum = Convert.ToInt64(reqid)
        End If

        Dim cn As SqlConnection = New SqlConnection(ConfigurationManager.ConnectionStrings("TradeServicesTestConnectionString").ToString())


        Dim ds As DataSet = SwiftUtils.SwiftRequestDetails(reqidnum)

        If ds IsNot Nothing AndAlso ds.Tables.Count > 0 AndAlso ds.Tables(0).Rows.Count > 0 Then
            Dim acctTitle As String = ds.Tables(0).Rows(0)("acctTitle")
            Dim comment As String = ds.Tables(0).Rows(0)("comments")
            Dim beneficiary As String = ds.Tables(0).Rows(0)("beneficiary")
            Dim beneficiaryAccount As String = ds.Tables(0).Rows(0)("beneficiaryAccountNumber")
            acctTitle = SanitizeRemark(acctTitle)
            comment = SanitizeRemark(comment)
            beneficiary = SanitizeRemark(beneficiary)
            beneficiaryAccount = SanitizeRemark(beneficiaryAccount)
            'Update these columns
            Dim sqlUpdat As String = "UPDATE tblSwiftRequest SET comments=@comments, acctTitle=@acctTitle, beneficiary=@beneficiary,beneficiaryAccountNumber=@beneficiaryAccountNumber WHERE reqID=@reqID"

            Using cn
                cn.Open()
                Dim cmdUpdate As New SqlCommand(sqlUpdat, cn)
                cmdUpdate.Parameters.AddWithValue("@comments", comment)
                cmdUpdate.Parameters.AddWithValue("@acctTitle", acctTitle)
                cmdUpdate.Parameters.AddWithValue("@beneficiary", beneficiary)
                cmdUpdate.Parameters.AddWithValue("@beneficiaryAccountNumber", beneficiaryAccount)
                cmdUpdate.Parameters.AddWithValue("@reqID", reqidnum)
                Dim i As Integer = cmdUpdate.ExecuteNonQuery()
                If i > 0 Then
                    'success
                    lblNoSwiftMsg.Text = "<font color=blue>Successfully Executed Resolution Process. Please go back and load this request from your queue.</font>"
                Else
                    'failed
                    lblNoSwiftMsg.Text = "<font color=red>Could not Successfully Complete the Resolution process. Please contact the Application Management/Support team.</font>"
                End If
            End Using

        Else
            lblNoSwiftMsg.Text = "Could not find information about transacion with reference: " & reqid
        End If
      

    End Sub
    Private Function SanitizeRemark(ByVal remark As String) As String
        Dim newRemark As String = remark

        If remark.Length > 2000000000000 Then
            Dim partOne As String = remark.Substring(0, 184)
            Dim partTwo As String = remark.Substring(remark.Length - 16, 16)

            newRemark = partOne & partTwo

        End If
        newRemark = newRemark.Replace(ChrW(38), " AND ").Replace(ChrW(62), "").Replace(ChrW(60), "").Replace(ChrW(39), "").Replace(ChrW(34), "").Replace("'", "")

        Return newRemark
    End Function

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Try
            Dim s As String = String.Empty
            If Not IsPostBack Then
                If Session("entrydate") Is Nothing Then
                    Session("entrydate") = Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy"))
                End If
                sqlDsUnpostedTransactions.DataBind()
                gvUnpostedTransactions.DataBind()

            End If
        Catch ex As Exception
            SwiftUtils.LogException(ex)
        End Try


    End Sub

    Protected Sub btnGetEntryForDate_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGetEntryForDate.Click
        Try
            Dim dateString As String = txtDateUnpostedEntries.Text
            If Not String.IsNullOrEmpty(dateString) Then
                Dim entrydate As DateTime = Convert.ToDateTime(dateString)
                Session("entrydate") = entrydate
                sqlDsUnpostedTransactions.DataBind()
                gvUnpostedTransactions.DataBind()
            End If
        Catch ex As Exception
            SwiftUtils.LogException(ex)
        End Try

    End Sub

    Protected Sub gvUnpostedTransactions_RowCommand(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs) Handles gvUnpostedTransactions.RowCommand
        lblResultStatus.Text = String.Empty

        Dim index As Integer = Convert.ToInt32(e.CommandArgument.ToString())

        Dim id As Long
        Dim sn As Long
        Dim SN_index As Long = 2 'This is the index of the columns that contains the SN.
        Dim username As String = Convert.ToString(Session("userid")) 'get the username of the user currently logged on.
        'get the account number of the requesrt.
        Dim idColumn As Integer = 1
        Dim c As String = e.CommandSource.ToString()
        Dim commandName As String = e.CommandName.ToLower().Trim()
        Try
            If (c.Trim().ToLower().CompareTo("system.web.ui.webcontrols.button") = 0) Then
                id = Convert.ToInt64(gvUnpostedTransactions.DataKeys(index).Value)
                sn = Convert.ToInt64(gvUnpostedTransactions.Rows(index).Cells(SN_index).Text)
                Dim result As Boolean = False
                If commandName = "already posted" Then
                    result = SwiftUtils.MarkEntryAsAlreadyPosted(id, sn, username)
                ElseIf commandName = "post entry" Then
                    result = SwiftUtils.RepostEntry(id, sn, username)
                End If

                If result = True Then

                    lblResultStatus.Text = "<font color=blue>" & e.CommandName & " Action Successfully Performed.</font>"
                Else

                    lblResultStatus.Text = "<font color=red>" & e.CommandName & " Action Failed.</font>"
                End If
                gvUnpostedTransactions.DataBind()
            End If
        Catch ex As Exception
            SwiftUtils.LogException(ex)
        End Try





    End Sub
End Class
